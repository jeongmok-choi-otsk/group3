# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

import json
import requests 
import cx_Oracle
import os

#한글 지원 방법
#import os
#os.putenv('NLS_LANG', '.UTF8')

#DB PATH 설정 
LOCATION = r"C:\Oracle\instantclient_19_8"
#LOCATION = r"D:\02.EDI.Innovation\Toy-Project\instantclient_19_8"
os.environ["PATH"] = LOCATION + ";" + os.environ["PATH"]
#DB PATH 설정 

#DB 연결에 필요한 기본 정보 (유저, 비밀번호, 데이터베이스 서버 주소), DEV 환경 정보.
connection = cx_Oracle.connect(
    'ESVCWEB', 'ESVCWEB12#$', '10.65.225.41:1521/IZAEDID')
cursor = connection.cursor()

#SBI TEST환경 API
initurl = 'https://10.65.225.58:10084/B2BAPIs/svc/'
user = '9017010'
pwd = 'qwer123$'
# Set proper headers
headers = {'Accept': 'application/json','content-type' : 'application/json'}

def SearchMqNameDB(tmpuitabidx) :
    tmpqry = "select S_NAME from T_EDI_MAINT_SKD_LIST where S_FLAG = 'Y'"
    MainNAMELIST = []
    if tmpuitabidx == 0:
        tmpqryand = " AND S_TYPE = 'MQ'"
        url = initurl + 'serviceinstances/'
    elif tmpuitabidx == 1:
        tmpqryand = " AND S_TYPE = 'SCH'"
        url = initurl + 'schedules/'
    tmpqry = tmpqry + tmpqryand
    cursor.execute(tmpqry)
    #API CALL#############################################################################
    response = requests.get(url, auth=(user, pwd), headers=headers, verify=False)
    jsonData = response.json()
    StrjsonData = json.dumps(jsonData, indent=4)
    ######################################################################################
    if tmpuitabidx == 0:
        MqValue = cursor.fetchone()
        """
        #fetchall() : 지정 테이블 안의 모든 데이터를 추출
        #fetchone() : 지정 테이블 안의 데이터를 한 행씩 추출
        #fetchmany(size=원하는 데이터 수) : 지정 테이블 안의 데이터를 size 개의 행을 추출
        """
        MqListDB = []
        while MqValue :
            MqListDB.append(MqValue[0])
            MqValue = cursor.fetchone()
        for idx, asd in enumerate(jsonData) : 
            #print(jsonData)   
            if asd['serviceName'] in MqListDB:
                MainMqNameDeatails = []
                MainMqNameDeatails.append(asd['serviceName'])
                MainMqNameDeatails.append(asd['href'])
                MainMqNameDeatails.append(asd['activeStatus'])
                MainMqNameDeatails.append(asd['description'])
                MainNAMELIST.append(MainMqNameDeatails)
        return MainNAMELIST
    elif tmpuitabidx == 1:
        SchValue = cursor.fetchone()
        SchListDB = []
        while SchValue :
            SchListDB.append(SchValue[0])
            SchValue = cursor.fetchone()
        for idx, asd in enumerate(jsonData) : 
            #print(jsonData)   
            if asd['businessProcess'] in SchListDB:
                MainSchNameDeatails = []
                MainSchNameDeatails.append(asd['businessProcess'])
                MainSchNameDeatails.append(asd['href'])
                MainSchNameDeatails.append(asd['scheduleStatusEnabled'])
                MainSchNameDeatails.append(asd['timerSchedule'])
                MainNAMELIST.append(MainSchNameDeatails)
        return MainNAMELIST

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(830, 414)
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 631, 321))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setBaseSize(QtCore.QSize(0, 0))
        self.tabWidget.setIconSize(QtCore.QSize(2, 16))
        self.tabWidget.setObjectName("tabWidget")
        
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 631, 301))
        self.tableWidget.setDragEnabled(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(25)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget.verticalHeader().setStretchLastSection(False)
        self.tabWidget.addTab(self.tab, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 631, 301))
        self.tableWidget_2.setDragEnabled(True)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(4)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        self.tableWidget_2.horizontalHeader().setMinimumSectionSize(25)
        self.tableWidget_2.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget_2.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget_2.verticalHeader().setStretchLastSection(False)
        self.tabWidget.addTab(self.tab_2, "")

        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.tab_3)
        self.plainTextEdit.setGeometry(QtCore.QRect(20, 110, 551, 171))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.layoutWidget = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 20, 144, 62))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioButton_3 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_3.setObjectName("radioButton_3")
        self.verticalLayout.addWidget(self.radioButton_3)
        self.radioButton_2 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout.addWidget(self.radioButton_2)
        self.radioButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout.addWidget(self.radioButton)
        self.layoutWidget1 = QtWidgets.QWidget(self.tab_3)
        
        self.layoutWidget1.setGeometry(QtCore.QRect(400, 20, 200, 40))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_4.setObjectName("radioButton_4")
        self.verticalLayout_3.addWidget(self.radioButton_4)
        self.radioButton_5 = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_5.setObjectName("radioButton_5")
        self.verticalLayout_3.addWidget(self.radioButton_5)
        self.tabWidget.addTab(self.tab_3, "")
        
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tabWidget.addTab(self.tab_4, "")
        
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tabWidget.addTab(self.tab_5, "")
        
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(Dialog)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(10, 340, 811, 71))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")

        self.layoutWidget2 = QtWidgets.QWidget(Dialog)
        self.layoutWidget2.setGeometry(QtCore.QRect(650, 20, 171, 318))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(4)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_10 = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_10.setEnabled(True)
        self.pushButton_10.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton_10.setAutoDefault(True)
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout_2.addWidget(self.pushButton_10)
        self.pushButton_7 = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_7.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout_2.addWidget(self.pushButton_7, 0, QtCore.Qt.AlignTop)
        self.pushButton_9 = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_9.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout_2.addWidget(self.pushButton_9)
        self.pushButton_6 = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_6.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_2.addWidget(self.pushButton_6)
        self.pushButton_8 = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_8.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout_2.addWidget(self.pushButton_8)

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        Dialog.setTabOrder(self.tabWidget, self.radioButton_3)
        Dialog.setTabOrder(self.radioButton_3, self.radioButton_2)
        Dialog.setTabOrder(self.radioButton_2, self.radioButton)
        Dialog.setTabOrder(self.radioButton, self.radioButton_4)
        Dialog.setTabOrder(self.radioButton_4, self.radioButton_5)
        Dialog.setTabOrder(self.radioButton_5, self.plainTextEdit)
        Dialog.setTabOrder(self.plainTextEdit, self.pushButton_10)
        Dialog.setTabOrder(self.pushButton_10, self.pushButton_7)
        Dialog.setTabOrder(self.pushButton_7, self.pushButton_9)
        Dialog.setTabOrder(self.pushButton_9, self.pushButton_6)
        self.pushButton_6.setEnabled(False)
        Dialog.setTabOrder(self.pushButton_6, self.pushButton_8)
        self.pushButton_8.setEnabled(False)
        Dialog.setTabOrder(self.pushButton_8, self.plainTextEdit_2)
        Dialog.setTabOrder(self.plainTextEdit_2, self.tableWidget)
        Dialog.setTabOrder(self.tableWidget, self.tableWidget_2)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Check"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "No"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "MQ_NAME"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "MQ_STATUS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "MQ"))
        
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Check"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "No"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "S_NAME"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "S_STATUS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Service Schedule"))

        self.plainTextEdit.setPlainText(_translate("Dialog", "Running SQL :"))
        self.radioButton_3.setText(_translate("Dialog", "EDI BATCH Channel"))
        self.radioButton_2.setText(_translate("Dialog", "EDI Receive Channel"))
        self.radioButton.setText(_translate("Dialog", "EDI Send Channel"))
        self.radioButton_4.setText(_translate("Dialog", "Enable Schedule count"))
        self.radioButton_5.setText(_translate("Dialog", "Disable Schedule count"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Dialog", "DB schedule"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Dialog", "WF Terminated"))
        
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("Dialog", "WF Restart"))

        self.plainTextEdit_2.setPlainText(_translate("Dialog", "Click the search button to check the target of the API call."))
        
        self.pushButton_10.setText(_translate("Dialog", "Search"))
        self.pushButton_7.setText(_translate("Dialog", "Active"))
        self.pushButton_9.setText(_translate("Dialog", "Inactive"))
        self.pushButton_6.setText(_translate("Dialog", "Add"))
        self.pushButton_8.setText(_translate("Dialog", "Delete"))

        self.pushButton_10.clicked.connect(lambda: self.clicked("Search", self.tableWidget))
        self.pushButton_7.clicked.connect(lambda: self.clicked("Active", self.tableWidget))
        self.pushButton_9.clicked.connect(lambda: self.clicked("InActive", self.tableWidget))

        self.tabWidget.currentChanged.connect(lambda: self.clickedTab(self.tabWidget))
    
    def clickedTab(self, tab):
        tmptabidx = self.tabWidget.currentIndex()
        if (tmptabidx == 3 or tmptabidx == 4) :
            self.pushButton_10.setEnabled(False)
            self.plainTextEdit_2.setPlainText("Plesae click the DB schedule type and status you want to change.")
        else:
            self.pushButton_10.setEnabled(True)

    def clicked(self, text, table):
        tmptabidx = self.tabWidget.currentIndex()
        #print(tmptabidx)
        if tmptabidx == 0:
            self.plainTextEdit_2.clear()
            self.plainTextEdit_2.setPlainText("Ready for calling MQ API")
            tmpMQlist = []
            tmpMQlist = SearchMqNameDB(tmptabidx)
            tmpMQlist.sort()
            if text == "Search":
                print(tmpMQlist)
                self.tableWidget.setRowCount(len(tmpMQlist))
                for idx2, MqDetails in enumerate(tmpMQlist):
                    item = QCheckBox()
                    self.tableWidget.setCellWidget(idx2, 0, item)
                    self.tableWidget.setItem(
                        idx2, 1, QtWidgets.QTableWidgetItem(str(idx2+1)))
                    self.tableWidget.setItem(
                        idx2, 2, QtWidgets.QTableWidgetItem(MqDetails[0]))

                    if MqDetails[2] == 1:
                        self.tableWidget.setItem(idx2, 3, QtWidgets.QTableWidgetItem("Active"))
                    elif MqDetails[2] == 0:
                        self.tableWidget.setItem(idx2, 3, QtWidgets.QTableWidgetItem("InActive"))

                self.tableWidget.resizeColumnToContents(1)
                self.tableWidget.resizeColumnToContents(2)

            if (text == "Active" or text == "InActive") :
                if self.tableWidget.rowCount() == 0 : pass
                else :
                    checked_list = []
                    for i in range(self.tableWidget.rowCount()):
                        if self.tableWidget.cellWidget(i, 0).isChecked():
                            checked_list.append([i, self.tableWidget.item(i, 2).text()])
                        else:
                            pass
                    tmpActivity = ""
                    tmpstatus = ""
                    
                    if text == "Active" :
                        tmpActivity = True
                        tmpstatus = "Active"
                    elif text == "InActive" :
                        tmpActivity = False
                        tmpstatus = "InActive"
                    
                    tmpapicallresults = ""
                    for checked in checked_list :                    
                        for tempMq in tmpMQlist:
                            if tempMq[0] == checked[1] :
                                tmpjdata = {
                                "Enable" : tmpActivity,
                                "description": tempMq[0] + " is " + tmpstatus + " for Python Test by Python 3Team",
                                "serviceName": tempMq[0],
                                "targetEnv": "all"
                                }
                                jdata=json.dumps(tmpjdata)
                                putUrl = tempMq[1]
                                response = requests.put(putUrl, data=jdata, auth=(user, pwd), headers=headers, verify=False)
                                if response.status_code != 200:
                                    #print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:', response.content)
                                    tmpresstatus = response.status_code
                                    tmpresmsg = response.content
                                    tmpapicallresults = tmpapicallresults + "Name : " + tempMq[0] + " / Status: " + str(tmpresstatus) + " " + " / Error Response: " + str(tmpresmsg) + '\n'
                                elif response.status_code == 200:
                                    tmpapicallresults = tmpapicallresults + 'The API call request for the ' + tempMq[0] + ' was successful.' + '\n'
                    self.plainTextEdit_2.setPlainText("Click the search button to check the latest status. \n" + tmpapicallresults)
        elif tmptabidx == 1:
            self.plainTextEdit_2.clear()
            self.plainTextEdit_2.setPlainText("Ready for calling Schedule API")
            tmpSCHlist = []
            tmpSCHlist = SearchMqNameDB(tmptabidx)
            tmpSCHlist.sort()
            if text == "Search":
                self.tableWidget_2.setRowCount(len(tmpSCHlist))
                for idx2, MqDetails in enumerate(tmpSCHlist):
                    item = QCheckBox()
                    self.tableWidget_2.setCellWidget(idx2, 0, item)
                    self.tableWidget_2.setItem(
                        idx2, 1, QtWidgets.QTableWidgetItem(str(idx2+1)))
                    self.tableWidget_2.setItem(
                        idx2, 2, QtWidgets.QTableWidgetItem(MqDetails[0]))
                    #print(MqDetails)
                    tmpdetail = MqDetails[2]
                    print(tmpdetail)
                    tmpschstatus = tmpdetail["code"]
                    if tmpschstatus == True:
                        self.tableWidget_2.setItem(idx2, 3, QtWidgets.QTableWidgetItem("Active"))
                    elif tmpschstatus == False:
                        self.tableWidget_2.setItem(idx2, 3, QtWidgets.QTableWidgetItem("InActive"))
                self.tableWidget_2.resizeColumnToContents(1)
                self.tableWidget_2.resizeColumnToContents(2)

            if (text == "Active" or text == "InActive") :
                if self.tableWidget_2.rowCount() == 0 : pass
                else :
                    checked_list = []
                    for i in range(self.tableWidget_2.rowCount()):
                        if self.tableWidget_2.cellWidget(i, 0).isChecked():
                            checked_list.append([i, self.tableWidget_2.item(i, 2).text()])
                        else:
                            pass
                    tmpActivity = ""
                    tmpstatus = ""
                    if text == "Active" :
                        tmpActivity = True
                        tmpstatus = "Active"
                    elif text == "InActive" :
                        tmpActivity = False
                        tmpstatus = "InActive"
                    tmpapicallresults = ""
                    for checked in checked_list :                    
                        for tempSch in tmpSCHlist:
                            if tempSch[0] == checked[1] :
                                tmpjdata = {
                                "timerSchedule": tempSch[3],
                                "scheduleStatusEnabled": tmpActivity
                                }
                                jdata=json.dumps(tmpjdata)
                                putUrl = tempSch[1]
                                response = requests.put(putUrl, data=jdata, auth=(user, pwd), headers=headers, verify=False)
                                if response.status_code != 200:
                                    #print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:', response.content)
                                    tmpresstatus = response.status_code
                                    tmpresmsg = response.content
                                    tmpapicallresults = tmpapicallresults + "Name : " + tempSch[0] + " / Status: " + str(tmpresstatus) + " " + " / Error Response: " + str(tmpresmsg) + '\n'
                                elif response.status_code == 200:
                                    tmpapicallresults = tmpapicallresults + 'The API call request for the ' + tempSch[0] + ' was successful.' + '\n'
                    self.plainTextEdit_2.setPlainText("Click the search button to check the latest status. \n" + tmpapicallresults)
        elif tmptabidx == 2:
            self.plainTextEdit_2.clear()
            self.plainTextEdit_2.setPlainText("Ready for calling DB schedule")

            if text == "Search":
                if self.radioButton_4.isChecked() == True : # Active
                    if self.radioButton.isChecked() == True:
                        SelectQuery = """select count(*) from e_if_codelist where list_name ='CLT_SEND_INFO' and description in ('1','11','15','3','4','5','7')"""
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB send Active " + str(tmpSelect[0]))
                    elif self.radioButton_2.isChecked() == True:
                        SelectQuery = """select count(*) from e_if_codelist where list_name in ('CLT_RECEIVE_FTP','CLT_RECEIVE_SFTP') and DESCRIPTION = 'Y'"""
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB receive Active " + str(tmpSelect[0]))
                    elif self.radioButton_3.isChecked() == True:
                        SelectQuery = """select count(*) from e_if_codelist where list_name ='CLT_BATCH_INFO' and DESCRIPTION is not null and description not like '%_MAINTENANCE'"""
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB batch Active " + str(tmpSelect[0]))


                elif self.radioButton_5.isChecked() == True : # Inactive
                    if self.radioButton.isChecked() == True:
                        SelectQuery = """select count(*) from e_if_codelist where list_name ='CLT_SEND_INFO' and DESCRIPTION like '%_MAINTENANCE'"""
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB send InActive " + str(tmpSelect[0]))
                    elif self.radioButton_2.isChecked() == True:
                        SelectQuery = """select count(*) from e_if_codelist where list_name in ('CLT_RECEIVE_FTP','CLT_RECEIVE_SFTP') and DESCRIPTION like '%_MAINTENANCE'"""
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB receive InActive " + str(tmpSelect[0]))
                    elif self.radioButton_3.isChecked() == True:
                        SelectQuery = """ select count(*) from e_if_codelist where list_name ='CLT_BATCH_INFO' and DESCRIPTION like '%_MAINTENANCE' """
                        self.plainTextEdit.setPlainText(SelectQuery)
                        cursor.execute(SelectQuery)
                        tmpSelect = cursor.fetchone()
                        self.plainTextEdit_2.setPlainText("select DB batch InActive " + str(tmpSelect[0]))
            if text == "Active":
                if self.radioButton.isChecked() == True:
                    UpdateQuery = """update e_if_codelist set description =REGEXP_SUBSTR(DESCRIPTION, '[^_]+', 1,1) where list_name ='CLT_SEND_INFO' and DESCRIPTION like '%_MAINTENANCE'"""
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB send Active")
                    cursor.execute(UpdateQuery)
                    connection.commit()

                elif self.radioButton_2.isChecked() == True:
                    UpdateQuery = """update e_if_codelist set description =REGEXP_SUBSTR(DESCRIPTION, '[^_]+', 1,1) where list_name in ('CLT_RECEIVE_FTP','CLT_RECEIVE_SFTP') and DESCRIPTION like '%_MAINTENANCE'"""
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB receive Active")
                    cursor.execute(UpdateQuery)
                    connection.commit()

                elif self.radioButton_3.isChecked() == True:
                    UpdateQuery = """update e_if_codelist set description =REGEXP_SUBSTR(DESCRIPTION, '[^_]+', 1,1) where list_name ='CLT_BATCH_INFO' and DESCRIPTION like '%_MAINTENANCE'"""
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB batch Active")
                    cursor.execute(UpdateQuery)
                    connection.commit()

            elif text == "InActive":
                if self.radioButton.isChecked() == True:
                    UpdateQuery = """update  e_if_codelist set description = description || '_MAINTENANCE' where list_name ='CLT_SEND_INFO' and description in ('1','11','15','3','4','5','7')"""
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB send InActive")
                    cursor.execute(UpdateQuery)
                    connection.commit()

                elif self.radioButton_2.isChecked() == True:
                    UpdateQuery = """update e_if_codelist set description = description || '_MAINTENANCE' where list_name in ('CLT_RECEIVE_FTP','CLT_RECEIVE_SFTP') and DESCRIPTION = 'Y' """
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB receive InActive")
                    cursor.execute(UpdateQuery)
                    connection.commit()

                elif self.radioButton_3.isChecked() == True:
                    UpdateQuery = """update e_if_codelist set description = description || '_MAINTENANCE' where list_name ='CLT_BATCH_INFO' and description not like '%_MAINTENANCE' """
                    self.plainTextEdit.setPlainText(UpdateQuery)
                    self.plainTextEdit_2.setPlainText("excute DB batch InActive")
                    cursor.execute(UpdateQuery)
                    connection.commit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
